syntax = syntax_rule, {syntax_rule};

(* A <syntax rule> defines the sequences of symbols represented by a <meta identifier> *)
syntax_rule 
= meta_identifier, '=', definitions_list, ';';

(* | separates alternative <single definitions> *)
definitions_list
= single_definition, {'|', single_definition};

(* , separates successive <terms> *)
single_definition = term, {',', term};

(* A <term> represents any sequence of symbols that is defined by the <factor> but not defined by the <exception> *)
term = factor, ['-', exception];

(* A <factor> may be used as an <exception> if it could be replaced by a <factor> containing no <meta identifiers> *)
exception = factor;

(* The <integer> specifies the number of repetitions of the <primary> *)
factor = [integer, '*'], primary;

primary
= optional_sequence 
| repeated_sequence 
| special_sequence 
| grouped_sequence 
| meta_identifier 
| terminal_string
;

(* The brackets [ and ] enclose symbols which are optional *)
optional_sequence = '[', definitions_list, ']';

(* The brackets { and } enclose symbols which may be repeated any number of times *)
repeated_sequence = '{', definitions_list, '}';

(* The brackets ( and ) allow any <definitions list> to be a <primary> *)
grouped_sequence = '(', definitions_list, ')';

(* A <terminal string> represents the <characters> between the quote symbols '_' or "_" *)
terminal_string
= "'", character - "'", {character - "'"}, "'"
| '"', character - '"', {character - '"'}, '"'
;

(* A <meta identifier> is the name of a syntactic element of the language being defined *)
meta_identifier = letter, {letter | decimal_digit};

integer = decimal_digit, {decimal_digit};

(* The meaning of a <special sequence> is not defined in the standard metalanguage. *)
special_sequence = '?', {character - '?'}, '?';

(* A comment is allowed anywhere outside a <terminal string>, <meta identifier>, <integer> or <special sequence> *)
comment = '(*', {comment_symbol}, '*)';

comment_symbol
= comment 
| terminal_string 
| special_sequence 
| character
;