// Generated from grammar/EBNFLexer.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class EBNFLexer extends Lexer {
	public static readonly IDENTIFIER = 1;
	public static readonly INTEGER = 2;
	public static readonly CONCATENATE_SYMBOL = 3;
	public static readonly DEFINING_SYMBOL = 4;
	public static readonly DEFINITION_SEPARATOR_SYMBOL = 5;
	public static readonly START_GROUP_SYMBOL = 6;
	public static readonly END_GROUP_SYMBOL = 7;
	public static readonly START_OPTION_SYMBOL = 8;
	public static readonly END_OPTION_SYMBOL = 9;
	public static readonly START_REPEAT_SYMBOL = 10;
	public static readonly END_REPEAT_SYMBOL = 11;
	public static readonly EXCEPT_SYMBOL = 12;
	public static readonly REPETITION_SYMBOL = 13;
	public static readonly TERMINATOR_SYMBOL = 14;
	public static readonly FIRST_QUOTE_SYMBOL = 15;
	public static readonly SECOND_QUOTE_SYMBOL = 16;
	public static readonly SPECIAL_SEQUENCE_SYMBOL = 17;
	public static readonly ESC_SEQ = 18;
	public static readonly GAP_SEPARATOR = 19;
	public static readonly COMMENT = 20;
	public static readonly COMMENTS_CHANNEL = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "COMMENTS_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LETTER", "DECIMAL_DIGIT", "IDENTIFIER", "INTEGER", "CONCATENATE_SYMBOL", 
		"DEFINING_SYMBOL", "DEFINITION_SEPARATOR_SYMBOL", "START_GROUP_SYMBOL", 
		"END_GROUP_SYMBOL", "START_OPTION_SYMBOL", "END_OPTION_SYMBOL", "START_REPEAT_SYMBOL", 
		"END_REPEAT_SYMBOL", "EXCEPT_SYMBOL", "REPETITION_SYMBOL", "TERMINATOR_SYMBOL", 
		"FIRST_QUOTE_SYMBOL", "SECOND_QUOTE_SYMBOL", "SPECIAL_SEQUENCE_SYMBOL", 
		"ESC_SEQ", "START_COMMENT_SYMBOL", "END_COMMENT_SYMBOL", "SPACE_CHARACTER", 
		"HORIZONTAL_TABULATION_CHARACTER", "NEW_LINE", "VERTICAL_TABULATION_CHARACTER", 
		"FORM_FEED", "OTHER_CHARACTER", "GAP_SEPARATOR", "COMMENT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "','", "'='", undefined, "'('", "')'", 
		undefined, undefined, undefined, undefined, "'-'", "'*'", undefined, undefined, 
		"'\"'", "'?'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "IDENTIFIER", "INTEGER", "CONCATENATE_SYMBOL", "DEFINING_SYMBOL", 
		"DEFINITION_SEPARATOR_SYMBOL", "START_GROUP_SYMBOL", "END_GROUP_SYMBOL", 
		"START_OPTION_SYMBOL", "END_OPTION_SYMBOL", "START_REPEAT_SYMBOL", "END_REPEAT_SYMBOL", 
		"EXCEPT_SYMBOL", "REPETITION_SYMBOL", "TERMINATOR_SYMBOL", "FIRST_QUOTE_SYMBOL", 
		"SECOND_QUOTE_SYMBOL", "SPECIAL_SEQUENCE_SYMBOL", "ESC_SEQ", "GAP_SEPARATOR", 
		"COMMENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(EBNFLexer._LITERAL_NAMES, EBNFLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return EBNFLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(EBNFLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "EBNFLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return EBNFLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return EBNFLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return EBNFLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return EBNFLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x16\xB6\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x03\x02\x03\x02\x03\x03" +
		"\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x07\x04H\n\x04\f\x04\x0E\x04" +
		"K\v\x04\x03\x05\x06\x05N\n\x05\r\x05\x0E\x05O\x03\x06\x03\x06\x03\x07" +
		"\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\v\x05\v_" +
		"\n\v\x03\f\x03\f\x03\f\x05\fd\n\f\x03\r\x03\r\x03\r\x05\ri\n\r\x03\x0E" +
		"\x03\x0E\x03\x0E\x05\x0En\n\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11" +
		"\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15" +
		"\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x05\x15\x84\n\x15\x03" +
		"\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03" +
		"\x19\x03\x1A\x07\x1A\x91\n\x1A\f\x1A\x0E\x1A\x94\v\x1A\x03\x1A\x03\x1A" +
		"\x07\x1A\x98\n\x1A\f\x1A\x0E\x1A\x9B\v\x1A\x03\x1B\x03\x1B\x03\x1C\x03" +
		"\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x06\x1E\xA8" +
		"\n\x1E\r\x1E\x0E\x1E\xA9\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x07\x1F\xB0\n" +
		"\x1F\f\x1F\x0E\x1F\xB3\v\x1F\x03\x1F\x03\x1F\x03\xB1\x02\x02 \x03\x02" +
		"\x02\x05\x02\x02\x07\x02\x03\t\x02\x04\v\x02\x05\r\x02\x06\x0F\x02\x07" +
		"\x11\x02\b\x13\x02\t\x15\x02\n\x17\x02\v\x19\x02\f\x1B\x02\r\x1D\x02\x0E" +
		"\x1F\x02\x0F!\x02\x10#\x02\x11%\x02\x12\'\x02\x13)\x02\x14+\x02\x02-\x02" +
		"\x02/\x02\x021\x02\x023\x02\x025\x02\x027\x02\x029\x02\x02;\x02\x15=\x02" +
		"\x16\x03\x02\b\x04\x02C\\c|\x04\x02//aa\x05\x02##11~~\x04\x0200==\x04" +
		"\x02))\u201B\u201B\v\x02%(--<<>>@@BB^^`a\x80\x80\x02\xBE\x02\x07\x03\x02" +
		"\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02" +
		"\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02" +
		"\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02" +
		"\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02" +
		"\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02" +
		"\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03" +
		"\x02\x02\x02\x03?\x03\x02\x02\x02\x05A\x03\x02\x02\x02\x07C\x03\x02\x02" +
		"\x02\tM\x03\x02\x02\x02\vQ\x03\x02\x02\x02\rS\x03\x02\x02\x02\x0FU\x03" +
		"\x02\x02\x02\x11W\x03\x02\x02\x02\x13Y\x03\x02\x02\x02\x15^\x03\x02\x02" +
		"\x02\x17c\x03\x02\x02\x02\x19h\x03\x02\x02\x02\x1Bm\x03\x02\x02\x02\x1D" +
		"o\x03\x02\x02\x02\x1Fq\x03\x02\x02\x02!s\x03\x02\x02\x02#u\x03\x02\x02" +
		"\x02%w\x03\x02\x02\x02\'y\x03\x02\x02\x02)\x83\x03\x02\x02\x02+\x85\x03" +
		"\x02\x02\x02-\x88\x03\x02\x02\x02/\x8B\x03\x02\x02\x021\x8D\x03\x02\x02" +
		"\x023\x92\x03\x02\x02\x025\x9C\x03\x02\x02\x027\x9E\x03\x02\x02\x029\xA0" +
		"\x03\x02\x02\x02;\xA7\x03\x02\x02\x02=\xAD\x03\x02\x02\x02?@\t\x02\x02" +
		"\x02@\x04\x03\x02\x02\x02AB\x042;\x02B\x06\x03\x02\x02\x02CI\x05\x03\x02" +
		"\x02DH\x05\x03\x02\x02EH\x05\x05\x03\x02FH\t\x03\x02\x02GD\x03\x02\x02" +
		"\x02GE\x03\x02\x02\x02GF\x03\x02\x02\x02HK\x03\x02\x02\x02IG\x03\x02\x02" +
		"\x02IJ\x03\x02\x02\x02J\b\x03\x02\x02\x02KI\x03\x02\x02\x02LN\x05\x05" +
		"\x03\x02ML\x03\x02\x02\x02NO\x03\x02\x02\x02OM\x03\x02\x02\x02OP\x03\x02" +
		"\x02\x02P\n\x03\x02\x02\x02QR\x07.\x02\x02R\f\x03\x02\x02\x02ST\x07?\x02" +
		"\x02T\x0E\x03\x02\x02\x02UV\t\x04\x02\x02V\x10\x03\x02\x02\x02WX\x07*" +
		"\x02\x02X\x12\x03\x02\x02\x02YZ\x07+\x02\x02Z\x14\x03\x02\x02\x02[_\x07" +
		"]\x02\x02\\]\x07*\x02\x02]_\x071\x02\x02^[\x03\x02\x02\x02^\\\x03\x02" +
		"\x02\x02_\x16\x03\x02\x02\x02`d\x07_\x02\x02ab\x071\x02\x02bd\x07+\x02" +
		"\x02c`\x03\x02\x02\x02ca\x03\x02\x02\x02d\x18\x03\x02\x02\x02ei\x07}\x02" +
		"\x02fg\x07*\x02\x02gi\x07<\x02\x02he\x03\x02\x02\x02hf\x03\x02\x02\x02" +
		"i\x1A\x03\x02\x02\x02jn\x07\x7F\x02\x02kl\x07<\x02\x02ln\x07+\x02\x02" +
		"mj\x03\x02\x02\x02mk\x03\x02\x02\x02n\x1C\x03\x02\x02\x02op\x07/\x02\x02" +
		"p\x1E\x03\x02\x02\x02qr\x07,\x02\x02r \x03\x02\x02\x02st\t\x05\x02\x02" +
		"t\"\x03\x02\x02\x02uv\t\x06\x02\x02v$\x03\x02\x02\x02wx\x07$\x02\x02x" +
		"&\x03\x02\x02\x02yz\x07A\x02\x02z(\x03\x02\x02\x02{|\x07^\x02\x02|\x84" +
		"\x07$\x02\x02}~\x07^\x02\x02~\x84\x07)\x02\x02\x7F\x80\x07^\x02\x02\x80" +
		"\x84\x07\u201B\x02\x02\x81\x82\x07^\x02\x02\x82\x84\x07^\x02\x02\x83{" +
		"\x03\x02\x02\x02\x83}\x03\x02\x02\x02\x83\x7F\x03\x02\x02\x02\x83\x81" +
		"\x03\x02\x02\x02\x84*\x03\x02\x02\x02\x85\x86\x07*\x02\x02\x86\x87\x07" +
		",\x02\x02\x87,\x03\x02\x02\x02\x88\x89\x07,\x02\x02\x89\x8A\x07+\x02\x02" +
		"\x8A.\x03\x02\x02\x02\x8B\x8C\x07\"\x02\x02\x8C0\x03\x02\x02\x02\x8D\x8E" +
		"\x07\v\x02\x02\x8E2\x03\x02\x02\x02\x8F\x91\x07\x0F\x02\x02\x90\x8F\x03" +
		"\x02\x02\x02\x91\x94\x03\x02\x02\x02\x92\x90\x03\x02\x02\x02\x92\x93\x03" +
		"\x02\x02\x02\x93\x95\x03\x02\x02\x02\x94\x92\x03\x02\x02\x02\x95\x99\x07" +
		"\f\x02\x02\x96\x98\x07\x0F\x02\x02\x97\x96\x03\x02\x02\x02\x98\x9B\x03" +
		"\x02\x02\x02\x99\x97\x03\x02\x02\x02\x99\x9A\x03\x02\x02\x02\x9A4\x03" +
		"\x02\x02\x02\x9B\x99\x03\x02\x02\x02\x9C\x9D\x07\r\x02\x02\x9D6\x03\x02" +
		"\x02\x02\x9E\x9F\x07\x0E\x02\x02\x9F8\x03\x02\x02\x02\xA0\xA1\t\x07\x02" +
		"\x02\xA1:\x03\x02\x02\x02\xA2\xA8\x05/\x18\x02\xA3\xA8\x051\x19\x02\xA4" +
		"\xA8\x053\x1A\x02\xA5\xA8\x055\x1B\x02\xA6\xA8\x057\x1C\x02\xA7\xA2\x03" +
		"\x02\x02\x02\xA7\xA3\x03\x02\x02\x02\xA7\xA4\x03\x02\x02\x02\xA7\xA5\x03" +
		"\x02\x02\x02\xA7\xA6\x03\x02\x02\x02\xA8\xA9\x03\x02\x02\x02\xA9\xA7\x03" +
		"\x02\x02\x02\xA9\xAA\x03\x02\x02\x02\xAA\xAB\x03\x02\x02\x02\xAB\xAC\b" +
		"\x1E\x02\x02\xAC<\x03\x02\x02\x02\xAD\xB1\x05+\x16\x02\xAE\xB0\v\x02\x02" +
		"\x02\xAF\xAE\x03\x02\x02\x02\xB0\xB3\x03\x02\x02\x02\xB1\xB2\x03\x02\x02" +
		"\x02\xB1\xAF\x03\x02\x02\x02\xB2\xB4\x03\x02\x02\x02\xB3\xB1\x03\x02\x02" +
		"\x02\xB4\xB5\x05-\x17\x02\xB5>\x03\x02\x02\x02\x10\x02GIO^chm\x83\x92" +
		"\x99\xA7\xA9\xB1\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!EBNFLexer.__ATN) {
			EBNFLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(EBNFLexer._serializedATN));
		}

		return EBNFLexer.__ATN;
	}

}

