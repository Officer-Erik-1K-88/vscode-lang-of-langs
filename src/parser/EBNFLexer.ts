// Generated from grammar/EBNFLexer.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class EBNFLexer extends Lexer {
	public static readonly IDENTIFIER = 1;
	public static readonly INTEGER = 2;
	public static readonly CONCATENATE_SYMBOL = 3;
	public static readonly DEFINING_SYMBOL = 4;
	public static readonly DEFINITION_SEPARATOR_SYMBOL = 5;
	public static readonly START_GROUP_SYMBOL = 6;
	public static readonly END_GROUP_SYMBOL = 7;
	public static readonly START_OPTION_SYMBOL = 8;
	public static readonly END_OPTION_SYMBOL = 9;
	public static readonly START_REPEAT_SYMBOL = 10;
	public static readonly END_REPEAT_SYMBOL = 11;
	public static readonly EXCEPT_SYMBOL = 12;
	public static readonly REPETITION_SYMBOL = 13;
	public static readonly TERMINATOR_SYMBOL = 14;
	public static readonly FIRST_QUOTE_SYMBOL = 15;
	public static readonly SECOND_QUOTE_SYMBOL = 16;
	public static readonly SPECIAL_SEQUENCE_SYMBOL = 17;
	public static readonly GAP_SEPARATOR = 18;
	public static readonly COMMENT = 19;
	public static readonly COMMENTS_CHANNEL = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "COMMENTS_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LETTER", "DECIMAL_DIGIT", "IDENTIFIER", "INTEGER", "CONCATENATE_SYMBOL", 
		"DEFINING_SYMBOL", "DEFINITION_SEPARATOR_SYMBOL", "START_GROUP_SYMBOL", 
		"END_GROUP_SYMBOL", "START_OPTION_SYMBOL", "END_OPTION_SYMBOL", "START_REPEAT_SYMBOL", 
		"END_REPEAT_SYMBOL", "EXCEPT_SYMBOL", "REPETITION_SYMBOL", "TERMINATOR_SYMBOL", 
		"FIRST_QUOTE_SYMBOL", "SECOND_QUOTE_SYMBOL", "SPECIAL_SEQUENCE_SYMBOL", 
		"START_COMMENT_SYMBOL", "END_COMMENT_SYMBOL", "SPACE_CHARACTER", "HORIZONTAL_TABULATION_CHARACTER", 
		"NEW_LINE", "VERTICAL_TABULATION_CHARACTER", "FORM_FEED", "OTHER_CHARACTER", 
		"GAP_SEPARATOR", "COMMENT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "','", "'='", undefined, "'('", "')'", 
		undefined, undefined, undefined, undefined, "'-'", "'*'", undefined, undefined, 
		"'\"'", "'?'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "IDENTIFIER", "INTEGER", "CONCATENATE_SYMBOL", "DEFINING_SYMBOL", 
		"DEFINITION_SEPARATOR_SYMBOL", "START_GROUP_SYMBOL", "END_GROUP_SYMBOL", 
		"START_OPTION_SYMBOL", "END_OPTION_SYMBOL", "START_REPEAT_SYMBOL", "END_REPEAT_SYMBOL", 
		"EXCEPT_SYMBOL", "REPETITION_SYMBOL", "TERMINATOR_SYMBOL", "FIRST_QUOTE_SYMBOL", 
		"SECOND_QUOTE_SYMBOL", "SPECIAL_SEQUENCE_SYMBOL", "GAP_SEPARATOR", "COMMENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(EBNFLexer._LITERAL_NAMES, EBNFLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return EBNFLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(EBNFLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "EBNFLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return EBNFLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return EBNFLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return EBNFLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return EBNFLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x15\xAF\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04" +
		"\x03\x04\x03\x04\x03\x04\x07\x04F\n\x04\f\x04\x0E\x04I\v\x04\x03\x05\x06" +
		"\x05L\n\x05\r\x05\x0E\x05M\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b" +
		"\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\v\x05\v]\n\v\x03\f\x03\f\x03" +
		"\f\x05\fb\n\f\x03\r\x03\r\x03\r\x05\rg\n\r\x03\x0E\x03\x0E\x03\x0E\x05" +
		"\x0El\n\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03" +
		"\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03" +
		"\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x07\x19\x85\n\x19" +
		"\f\x19\x0E\x19\x88\v\x19\x03\x19\x03\x19\x07\x19\x8C\n\x19\f\x19\x0E\x19" +
		"\x8F\v\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03" +
		"\x1D\x03\x1D\x03\x1D\x03\x1D\x06\x1D\x9C\n\x1D\r\x1D\x0E\x1D\x9D\x03\x1D" +
		"\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x07\x1E\xA6\n\x1E\f\x1E\x0E\x1E" +
		"\xA9\v\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\xA7\x02\x02\x1F" +
		"\x03\x02\x02\x05\x02\x02\x07\x02\x03\t\x02\x04\v\x02\x05\r\x02\x06\x0F" +
		"\x02\x07\x11\x02\b\x13\x02\t\x15\x02\n\x17\x02\v\x19\x02\f\x1B\x02\r\x1D" +
		"\x02\x0E\x1F\x02\x0F!\x02\x10#\x02\x11%\x02\x12\'\x02\x13)\x02\x02+\x02" +
		"\x02-\x02\x02/\x02\x021\x02\x023\x02\x025\x02\x027\x02\x029\x02\x14;\x02" +
		"\x15\x03\x02\b\x04\x02C\\c|\x04\x02//aa\x05\x02##11~~\x04\x0200==\x04" +
		"\x02))\u201B\u201B\v\x02%(--<<>>@@BB^^`a\x80\x80\x02\xB4\x02\x07\x03\x02" +
		"\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02" +
		"\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02" +
		"\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02" +
		"\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02" +
		"\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02" +
		"\'\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x03=\x03" +
		"\x02\x02\x02\x05?\x03\x02\x02\x02\x07A\x03\x02\x02\x02\tK\x03\x02\x02" +
		"\x02\vO\x03\x02\x02\x02\rQ\x03\x02\x02\x02\x0FS\x03\x02\x02\x02\x11U\x03" +
		"\x02\x02\x02\x13W\x03\x02\x02\x02\x15\\\x03\x02\x02\x02\x17a\x03\x02\x02" +
		"\x02\x19f\x03\x02\x02\x02\x1Bk\x03\x02\x02\x02\x1Dm\x03\x02\x02\x02\x1F" +
		"o\x03\x02\x02\x02!q\x03\x02\x02\x02#s\x03\x02\x02\x02%u\x03\x02\x02\x02" +
		"\'w\x03\x02\x02\x02)y\x03\x02\x02\x02+|\x03\x02\x02\x02-\x7F\x03\x02\x02" +
		"\x02/\x81\x03\x02\x02\x021\x86\x03\x02\x02\x023\x90\x03\x02\x02\x025\x92" +
		"\x03\x02\x02\x027\x94\x03\x02\x02\x029\x9B\x03\x02\x02\x02;\xA1\x03\x02" +
		"\x02\x02=>\t\x02\x02\x02>\x04\x03\x02\x02\x02?@\x042;\x02@\x06\x03\x02" +
		"\x02\x02AG\x05\x03\x02\x02BF\x05\x03\x02\x02CF\x05\x05\x03\x02DF\t\x03" +
		"\x02\x02EB\x03\x02\x02\x02EC\x03\x02\x02\x02ED\x03\x02\x02\x02FI\x03\x02" +
		"\x02\x02GE\x03\x02\x02\x02GH\x03\x02\x02\x02H\b\x03\x02\x02\x02IG\x03" +
		"\x02\x02\x02JL\x05\x05\x03\x02KJ\x03\x02\x02\x02LM\x03\x02\x02\x02MK\x03" +
		"\x02\x02\x02MN\x03\x02\x02\x02N\n\x03\x02\x02\x02OP\x07.\x02\x02P\f\x03" +
		"\x02\x02\x02QR\x07?\x02\x02R\x0E\x03\x02\x02\x02ST\t\x04\x02\x02T\x10" +
		"\x03\x02\x02\x02UV\x07*\x02\x02V\x12\x03\x02\x02\x02WX\x07+\x02\x02X\x14" +
		"\x03\x02\x02\x02Y]\x07]\x02\x02Z[\x07*\x02\x02[]\x071\x02\x02\\Y\x03\x02" +
		"\x02\x02\\Z\x03\x02\x02\x02]\x16\x03\x02\x02\x02^b\x07_\x02\x02_`\x07" +
		"1\x02\x02`b\x07+\x02\x02a^\x03\x02\x02\x02a_\x03\x02\x02\x02b\x18\x03" +
		"\x02\x02\x02cg\x07}\x02\x02de\x07*\x02\x02eg\x07<\x02\x02fc\x03\x02\x02" +
		"\x02fd\x03\x02\x02\x02g\x1A\x03\x02\x02\x02hl\x07\x7F\x02\x02ij\x07<\x02" +
		"\x02jl\x07+\x02\x02kh\x03\x02\x02\x02ki\x03\x02\x02\x02l\x1C\x03\x02\x02" +
		"\x02mn\x07/\x02\x02n\x1E\x03\x02\x02\x02op\x07,\x02\x02p \x03\x02\x02" +
		"\x02qr\t\x05\x02\x02r\"\x03\x02\x02\x02st\t\x06\x02\x02t$\x03\x02\x02" +
		"\x02uv\x07$\x02\x02v&\x03\x02\x02\x02wx\x07A\x02\x02x(\x03\x02\x02\x02" +
		"yz\x07*\x02\x02z{\x07,\x02\x02{*\x03\x02\x02\x02|}\x07,\x02\x02}~\x07" +
		"+\x02\x02~,\x03\x02\x02\x02\x7F\x80\x07\"\x02\x02\x80.\x03\x02\x02\x02" +
		"\x81\x82\x07\v\x02\x02\x820\x03\x02\x02\x02\x83\x85\x07\x0F\x02\x02\x84" +
		"\x83\x03\x02\x02\x02\x85\x88\x03\x02\x02\x02\x86\x84\x03\x02\x02\x02\x86" +
		"\x87\x03\x02\x02\x02\x87\x89\x03\x02\x02\x02\x88\x86\x03\x02\x02\x02\x89" +
		"\x8D\x07\f\x02\x02\x8A\x8C\x07\x0F\x02\x02\x8B\x8A\x03\x02\x02\x02\x8C" +
		"\x8F\x03\x02\x02\x02\x8D\x8B\x03\x02\x02\x02\x8D\x8E\x03\x02\x02\x02\x8E" +
		"2\x03\x02\x02\x02\x8F\x8D\x03\x02\x02\x02\x90\x91\x07\r\x02\x02\x914\x03" +
		"\x02\x02\x02\x92\x93\x07\x0E\x02\x02\x936\x03\x02\x02\x02\x94\x95\t\x07" +
		"\x02\x02\x958\x03\x02\x02\x02\x96\x9C\x05-\x17\x02\x97\x9C\x05/\x18\x02" +
		"\x98\x9C\x051\x19\x02\x99\x9C\x053\x1A\x02\x9A\x9C\x055\x1B\x02\x9B\x96" +
		"\x03\x02\x02\x02\x9B\x97\x03\x02\x02\x02\x9B\x98\x03\x02\x02\x02\x9B\x99" +
		"\x03\x02\x02\x02\x9B\x9A\x03\x02\x02\x02\x9C\x9D\x03\x02\x02\x02\x9D\x9B" +
		"\x03\x02\x02\x02\x9D\x9E\x03\x02\x02\x02\x9E\x9F\x03\x02\x02\x02\x9F\xA0" +
		"\b\x1D\x02\x02\xA0:\x03\x02\x02\x02\xA1\xA2\x07*\x02\x02\xA2\xA3\x07," +
		"\x02\x02\xA3\xA7\x03\x02\x02\x02\xA4\xA6\v\x02\x02\x02\xA5\xA4\x03\x02" +
		"\x02\x02\xA6\xA9\x03\x02\x02\x02\xA7\xA8\x03\x02\x02\x02\xA7\xA5\x03\x02" +
		"\x02\x02\xA8\xAA\x03\x02\x02\x02\xA9\xA7\x03\x02\x02\x02\xAA\xAB\x07," +
		"\x02\x02\xAB\xAC\x07+\x02\x02\xAC\xAD\x03\x02\x02\x02\xAD\xAE\b\x1E\x03" +
		"\x02\xAE<\x03\x02\x02\x02\x0F\x02EGM\\afk\x86\x8D\x9B\x9D\xA7\x04\b\x02" +
		"\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!EBNFLexer.__ATN) {
			EBNFLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(EBNFLexer._serializedATN));
		}

		return EBNFLexer.__ATN;
	}

}

